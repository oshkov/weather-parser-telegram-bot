import telebot
from telebot import types
import config
import sqlite3
import time
import requests
from bs4 import BeautifulSoup
import fake_useragent

print("@weathersupporttgbot\n\n–ë–æ—Ç –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É (",time.strftime('%d.%m.%Y / %X'),")\n")

bot = telebot.TeleBot(config.TOKEN)

# –ö–æ–º–∞–Ω–¥—ã /start –∏ /changecity
@bot.message_handler(commands=["start", "changecity"])
def welcome(message):

    db = sqlite3.connect("users.db")
    sql = db.cursor()

    # –°–æ–∑–¥–∞–µ—Ç—Å—è —Ç–∞–±–ª–∏—Ü–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –µ—Å–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –µ–µ –Ω–µ –±—ã–ª–æ
    sql.execute("""CREATE TABLE IF NOT EXISTS users (
    enter TEXT,
    id TEXT,
    username TEXT,
    name TEXT,
    lastname TEXT,
    city TEXT,
    url TEXT,
    notification INT,
    lastaction TEXT
)""")
    db.commit()

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ–≥–æ –¥–æ —ç—Ç–æ–≥–æ –Ω–µ –±—ã–ª–æ
    sql.execute(f"SELECT id FROM users WHERE id = ?", (message.from_user.id, ))
    if sql.fetchone() is None:
        jointime = time.strftime('%d.%m.%Y / %X')
        sql.execute("INSERT INTO users VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)", (jointime ,message.from_user.id, message.from_user.username, message.from_user.first_name, message.from_user.last_name, None, None, 1, None))
        db.commit()
    else:
        pass

    # –ë–æ—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    global messageWriteCity
    messageWriteCity = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
    bot.register_next_step_handler(message, addCity);

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É
def addCity(message):
    db = sqlite3.connect("users.db")
    sql = db.cursor()

    search = "https://www.gismeteo.ru/search/" # –°—Å—ã–ª–∫–∞ –≥–¥–µ –±—É–¥—É—Ç –ø–∞—Ä—Å–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É
    city = message.text # –í –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    link = search + city # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ —Å –Ω—É–∂–Ω—ã–º –≥–æ—Ä–æ–¥–æ–º
    HEADERS = {'User-Agent': fake_useragent.UserAgent().random} # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—ç–π–∫ —é–∑–µ—Ä –∞–≥–µ–Ω—Ç
    page = requests.get(link, headers=HEADERS)
    html = BeautifulSoup(page.text, 'lxml') # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    attempt = 0 # –ü–æ–ø—ã—Ç–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–∞
    while attempt <= 3:

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
        if attempt == 0:
            search = bot.send_message(message.chat.id, "–ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤ üîç")

        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞ —Ç—Ä–∏ –ø–æ–ø—ã—Ç–∫–∏, —Ç–æ –≤—ã–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ
        elif attempt == 3:
            markup = types.InlineKeyboardMarkup()
            btn1 = types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data='edit')
            markup.add(btn1)

            bot.edit_message_text(chat_id=message.chat.id, message_id=search.message_id, text=f"""–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –µ—â–µ —Ä–∞–∑""", reply_markup=markup, parse_mode="Markdown")
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
            try:
                bot.delete_message(message.chat.id, messageWriteCity.message_id)
            except:
                bot.delete_message(message.chat.id, messageWriteCity1.message_id)

            break

        try:
            try:
                list = html.find_all("div", {"class": "catalog-list"})[1] # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —Å –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏
            except:
                list = html.find_all("div", {"class": "catalog-list"})[0] # –ï—Å–ª–∏ –Ω–µ—Ç –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ (–ú–∞–∫—Å–∏–º—É–º 3 –≥–æ—Ä–æ–¥–∞)
            try: 
                city0 = list.find_all("div", {"class": "catalog-item"})[0] # –í—ã–±–∏—Ä–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞
                nameOfCity0 = city0.find("a", {"class": "link-item"}).get_text(strip=True) # –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
                district0 = city0.find("a", {"class": "link district"}).get_text(strip=True) # –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ—Å–ø—É–±–ª–∏–∫—É
                country0 = city0.find("a", {"class": "link country"}).get_text(strip=True) # –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–∞–Ω—É
                global urlOfCity0
                urlOfCity0 = "https://www.gismeteo.ru/" + city0.find("a", {"class": "link-item"}).get('href'); # –ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–≥–æ–¥—É –ø–µ—Ä–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞

                # –°–æ–∑–¥–∞–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–¥–Ω–∏–º –≥–æ—Ä–æ–¥–æ–º, –µ—Å–ª–∏ –¥—Ä—É–≥–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                markup = types.InlineKeyboardMarkup(row_width=1)
                btn1 = types.InlineKeyboardButton(f"{nameOfCity0} ({district0} {country0})", callback_data='firstCity')
                btn2 = types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data='edit')
                markup.add(btn1, btn2)
                try:
                    city1 = list.find_all("div", {"class": "catalog-item"})[1] #–í—ã–±–∏—Ä–∞–µ—Ç—Å—è –≤—Ç–æ—Ä–æ–π –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞
                    nameOfCity1 = city1.find("a", {"class": "link-item"}).get_text(strip=True) #–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
                    district1 = city1.find("a", {"class": "link district"}).get_text(strip=True) #–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ—Å–ø—É–±–ª–∏–∫—É
                    country1 = city1.find("a", {"class": "link country"}).get_text(strip=True) #–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–∞–Ω—É
                    global urlOfCity1
                    urlOfCity1 = "https://www.gismeteo.ru/" + city1.find("a", {"class": "link-item"}).get('href')

                    # –°–æ–∑–¥–∞–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–≤—É–º—è –≥–æ—Ä–æ–¥–∞–º–∏, –µ—Å–ª–∏ –¥—Ä—É–≥–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                    markup = types.InlineKeyboardMarkup(row_width=1)
                    btn1 = types.InlineKeyboardButton(f"{nameOfCity0} ({district0} {country0})", callback_data='firstCity')
                    btn2 = types.InlineKeyboardButton(f"{nameOfCity1} ({district1} {country1})", callback_data='secondCity')
                    btn3 = types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data='edit')
                    markup.add(btn1, btn2, btn3)
                    try:
                        city2 = list.find_all("div", {"class": "catalog-item"})[2] # –í—ã–±–∏—Ä–∞–µ—Ç—Å—è —Ç—Ä–µ—Ç–∏–π –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞
                        nameOfCity2 = city2.find("a", {"class": "link-item"}).get_text(strip=True) # –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
                        district2 = city2.find("a", {"class": "link district"}).get_text(strip=True) # –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ—Å–ø—É–±–ª–∏–∫—É
                        country2 = city2.find("a", {"class": "link country"}).get_text(strip=True) # –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–∞–Ω—É
                        global urlOfCity2
                        urlOfCity2 = "https://www.gismeteo.ru/" + city2.find("a", {"class": "link-item"}).get('href')

                        # –°–æ–∑–¥–∞–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç—Ä–µ–º—è –≥–æ—Ä–æ–¥–∞–º–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –¥—Ä—É–≥–∏–µ –Ω–∞–π–¥–µ–Ω—ã
                        markup = types.InlineKeyboardMarkup(row_width=1)
                        btn1 = types.InlineKeyboardButton(f"{nameOfCity0} ({district0} {country0})", callback_data='firstCity')
                        btn2 = types.InlineKeyboardButton(f"{nameOfCity1} ({district1} {country1})", callback_data='secondCity')
                        btn3 = types.InlineKeyboardButton(f"{nameOfCity2} ({district2} {country2})", callback_data='thirdCity')
                        btn4 = types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data='edit')
                        markup.add(btn1, btn2, btn3, btn4)
                    except:
                        pass
                except:
                    pass
            except:
                pass

            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö", reply_markup=markup)

            # –ì–æ—Ä–æ–¥ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            sql.execute(f"UPDATE users SET city = ? WHERE id = ?", (message.text, message.from_user.id))
            db.commit()

            bot.delete_message(message.chat.id, message.message_id) # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –≥–æ—Ä–æ–¥–∞ —É–¥–∞–ª—è–µ—Ç—Å—è

            # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
            try:
                bot.delete_message(message.chat.id, messageWriteCity.message_id)
            except:
                bot.delete_message(message.chat.id, messageWriteCity1.message_id)

            bot.delete_message(message.chat.id, search.message_id)
            
            break

        # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
        except:
            print(f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
            attempt = attempt + 1
            time.sleep(0.5)

# –ö–æ–º–∞–Ω–¥–∞ /about
@bot.message_handler(commands=["about"])
def weather(message):

    bot.send_message(message.chat.id, config.INFORMATION)

# –ö–æ–º–∞–Ω–¥–∞ /stats, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ
@bot.message_handler(commands=["stats"])
def weather(message):

    # –°–æ–∑–¥–∞–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data='list') # –í—ã–≤–µ–¥–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è mes –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å—Ç—Ä–æ–∫–∞ 182)
    markup.add(btn1)

    db = sqlite3.connect("users.db")
    sql = db.cursor()

    sql.execute("SELECT username FROM users")
    users = sql.fetchall()
    sql.execute("SELECT id FROM users")
    ids = sql.fetchall()

    # –°–æ–±–∏—Ä–∞–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    try:
        num = 0
        u = []
        i = []
        while True:
            for user in users[num]:
                for id in ids[num]:
                    if user == None:
                        for i in sql.execute("SELECT name FROM users WHERE id = ?", (id,)):
                            name = i[0]
                        u.append(name)
                        num = num + 1
                    else:
                        user = "@" + user
                        u.append(user)
                        num = num + 1
    except:
        bot.send_message(message.chat.id, f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–µ—Ç–µ–ª–µ–π: {num}", reply_markup=markup)

        # –í –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é mes –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è id –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
        try:
            num = 0
            global mes
            mes = ""
            while True:
                mes = mes + f"{u[num]}\n"
                num = num + 1
        except:
            pass

# –ö–æ–º–∞–Ω–¥–∞ /weather
@bot.message_handler(commands=["weather"])
def weather(message):

    db = sqlite3.connect("users.db")
    sql = db.cursor()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –≤ –±–¥
    action = time.strftime('%d.%m.%Y / %X / ') + "–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã —Å–µ–π—á–∞—Å –∫–æ–º–∞–Ω–¥–æ–π /weather"
    sql.execute(f"UPDATE users SET lastaction = ? WHERE id = ?", (action , message.from_user.id))
    db.commit()

    # –ò–∑ —Ç–∞–±–ª–∏—Ü—ã –±–µ—Ä–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ, –æ—Ç–≤–µ—á–∞—é—â–µ–µ –∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (0 - –≤—ã–∫–ª, 1 - –≤–∫–ª)
    for i in sql.execute("SELECT notification FROM users WHERE id = ?", (message.from_user.id, )):
        notif = i[0]

    # –°–æ–∑–¥–∞–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton("–°–µ–π—á–∞—Å", callback_data='pogodaNow')
    btn2 = types.InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data='pogodaToday')
    markup.row(btn1, btn2)
    btn3 = types.InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data='pogodaTomorrow')
    btn4 = types.InlineKeyboardButton("10 –¥–Ω–µ–π", callback_data='pogoda10d')
    markup.row(btn3, btn4)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if notif == 0:
        btn5 = types.InlineKeyboardButton("–í–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='notifNow')
        markup.add(btn5)
    else:
        btn5 = types.InlineKeyboardButton("–í—ã–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='notifNow')
        markup.add(btn5)

    # –ü–æ–∏—Å–∫ –ø–æ–≥–æ–¥—ã –ø–æ –≥–æ—Ä–æ–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    attempt = 0
    while attempt <= 3:
        if attempt == 3:
            bot.edit_message_text(chat_id=message.chat.id, message_id=search.message_id, text=f"""–ü–æ–≥–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
                             
–î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π""", reply_markup=markup, parse_mode="Markdown")
            
            break

        try:

            if attempt == 0:
                search = bot.send_message(message.chat.id, f"–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üîç ‚Ä¢ ¬∑ ¬∑", reply_markup=markup)
            else:
                bot.edit_message_text(chat_id=message.chat.id, message_id=search.message_id, text=f"""–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üîç ‚Ä¢ ¬∑ ¬∑""", reply_markup=markup, parse_mode="Markdown")

            for i in sql.execute("SELECT url FROM users WHERE id = ?", (message.from_user.id, )):
                url = i[0]
            url1 = url + "now"
            HEADERS = {'User-Agent': fake_useragent.UserAgent().random} #–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—ç–π–∫ —é–∑–µ—Ä –∞–≥–µ–Ω—Ç
            page = requests.get(url1, headers=HEADERS)
            html = BeautifulSoup(page.text, 'lxml') #–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            title = html.find("div", {"class": "page-title"})
            titleText = title.find("h1").get_text()
            tempNow = html.find_all("span", {"class": "unit unit_temperature_c"})[0].get_text(strip=True)
            status = html.find("div", {"class": "now-desc"}).get_text(strip=True)
            bot.edit_message_text(chat_id=message.chat.id, message_id=search.message_id, text=f"""–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üîç ¬∑ ‚Ä¢ ¬∑""", reply_markup=markup, parse_mode="Markdown")
            tempFeel = html.find_all("span", {"class": "unit unit_temperature_c"})[7].get_text(strip=True)
            wind = html.find("div", {"class": "unit unit_wind_m_s"})
            bot.edit_message_text(chat_id=message.chat.id, message_id=search.message_id, text=f"""–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üîç ¬∑ ¬∑ ‚Ä¢""", reply_markup=markup, parse_mode="Markdown")
            wind.select_one('.item-measure').decompose()
            wind = wind.get_text()


            bot.edit_message_text(chat_id=message.chat.id, message_id=search.message_id, text=f"""{titleText}:

*{status}, {tempNow}¬∞, {wind} –º/c*

–ü–æ –æ—â—É—â–µ–Ω–∏—é {tempFeel}""", reply_markup=markup, parse_mode="Markdown")

            break

        # –ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        except:
            print(f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
            attempt = attempt + 1
            time.sleep(0.5)

# –ö–æ–º–∞–Ω–¥—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):

    db = sqlite3.connect("users.db")
    sql = db.cursor()

# –§—É–Ω–∫—Ü–∏–∏

    # –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    def temp(num):
        temp = html.find_all("span", {"class": "unit unit_temperature_c"})[num].get_text(strip=True)
        return temp

    # –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏
    def timings(num):
        time = html.find_all("div", {"class": "row-item"})[num]
        time = time.find("span")
        time.select_one('.time-sup').decompose()
        time = time.get_text(strip=True)
        return time

    # –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–≥–æ–¥—ã
    def status(num):
        status = html.find_all("div", {"class": "weather-icon tooltip"})[num].get('data-text')
        return status

    # –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    def day(num):
        day = html.find_all("div", {"class": "day"})[num].get_text()
        return day

    # –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã
    def date(num):
        date = html.find_all("div", {"class": "date"})[num].get_text()
        return date

    # –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞
    def wind(num):
        wind = html.find_all("span", {"class": "wind-unit unit unit_wind_m_s"})[num].get_text()
        return wind
    
    # –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
    def lastAction(action):
        db = sqlite3.connect("users.db")
        sql = db.cursor()
        
        action = time.strftime('%d.%m.%Y / %X / ') + action

        sql.execute(f"UPDATE users SET lastaction = ? WHERE id = ?", (action , call.from_user.id))
        db.commit()
    
    # –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º
    def addMarkup(period):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –≤–∫–ª/–≤—ã–∫–ª
        for i in sql.execute("SELECT notification FROM users WHERE id = ?", (call.from_user.id, )):
            notif = i[0]
        # –°–æ–∑–¥–∞–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn1 = types.InlineKeyboardButton("–°–µ–π—á–∞—Å", callback_data='pogodaNow')
        btn2 = types.InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data='pogodaToday')
        markup.row(btn1, btn2)
        btn3 = types.InlineKeyboardButton("10 –¥–Ω–µ–π", callback_data='pogoda10d')
        btn4 = types.InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data='pogodaTomorrow')
        markup.row(btn3, btn4)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if notif == 0:
            if period == "now":
                btn5 = types.InlineKeyboardButton("–í–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='notifNow')
            elif period == "today":
                btn5 = types.InlineKeyboardButton("–í–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='notifToday')
            elif period == "tomorrow":
                btn5 = types.InlineKeyboardButton("–í–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='notifTomorrow')
            elif period == "10d":
                btn5 = types.InlineKeyboardButton("–í–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='notif10d')
            markup.add(btn5)
        else:
            if period == "now":
                btn5 = types.InlineKeyboardButton("–í—ã–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='notifNow')
            elif period == "today":
                btn5 = types.InlineKeyboardButton("–í—ã–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='notifToday')
            elif period == "tomorrow":
                btn5 = types.InlineKeyboardButton("–í—ã–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='notifTomorrow')
            elif period == "10d":
                btn5 = types.InlineKeyboardButton("–í—ã–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='notif10d')
            markup.add(btn5)
        return markup

    # –§—É–Ω–∫—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    def notifOff():
        db = sqlite3.connect("users.db")
        sql = db.cursor()

        sql.execute(f"UPDATE users SET notification = ? WHERE id = ?", (0, call.from_user.id))
        db.commit()
        bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ãüîï")

    # –§—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    def notifOn():
        db = sqlite3.connect("users.db")
        sql = db.cursor()

        sql.execute(f"UPDATE users SET notification = ? WHERE id = ?", (1, call.from_user.id))
        db.commit()
        bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ãüîî\n\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ 7.00 –∏ 21.00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å")

    # –§—É–Ω–∫—Ü–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∞—è –ø–æ–≥–æ–¥—É —Å–µ–π—á–∞—Å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    def pogodaAdd(url):
        attempt = 0
        while attempt <= 3:
            if attempt == 3:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"""–ü–æ–≥–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
                                
–î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π""", reply_markup=addMarkup("now"), parse_mode="Markdown")
                
                break

            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üîç ‚Ä¢ ¬∑ ¬∑", reply_markup=addMarkup("now")) # –°–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–µ–µ –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                HEADERS = {'User-Agent': fake_useragent.UserAgent().random} #–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—ç–π–∫ —é–∑–µ—Ä –∞–≥–µ–Ω—Ç
                url = url + "now"
                page = requests.get(url, headers=HEADERS)
                html = BeautifulSoup(page.text, 'lxml') #–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                title = html.find("div", {"class": "page-title"})
                titleText = title.find("h1").get_text()
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üîç ¬∑ ‚Ä¢ ¬∑", reply_markup=addMarkup("now")) # –°–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–µ–µ –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                status = html.find("div", {"class": "now-desc"}).get_text(strip=True)
                wind = html.find("div", {"class": "unit unit_wind_m_s"})
                wind.select_one('.item-measure').decompose()
                wind = wind.get_text()
                temp = html.find_all("span", {"class": "unit unit_temperature_c"})[0].get_text(strip=True)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üîç ¬∑ ¬∑ ‚Ä¢", reply_markup=addMarkup("now")) # –°–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–µ–µ –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                temp1 = html.find_all("span", {"class": "unit unit_temperature_c"})[1].get_text(strip=True)

                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"""{titleText}:

*{status}, {temp}¬∞, {wind} –º/—Å*

–ü–æ –æ—â—É—â–µ–Ω–∏—é {temp1}""", reply_markup=addMarkup("now"), parse_mode="Markdown")
                
                break

            except:
                print(f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
                attempt = attempt + 1
                time.sleep(0.5)


    # –ò—Å—Ö–æ–¥ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—Ä–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    if call.data == 'firstCity':
        sql.execute("UPDATE users SET url = ? WHERE id = ?", (urlOfCity0, call.from_user.id))
        db.commit()
        pogodaAdd(urlOfCity0)

    # –ò—Å—Ö–æ–¥ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ç–æ—Ä–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    elif call.data == 'secondCity':
        sql.execute("UPDATE users SET url = ? WHERE id = ?", (urlOfCity1, call.from_user.id))
        db.commit()
        pogodaAdd(urlOfCity1)

    # –ò—Å—Ö–æ–¥ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç—Ä–µ—Ç—å–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    elif call.data == 'thirdCity':
        sql.execute("UPDATE users SET url = ? WHERE id = ?", (urlOfCity2, call.from_user.id))
        db.commit()
        pogodaAdd(urlOfCity2)

    # –ò—Å—Ö–æ–¥ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "—Å–µ–π—á–∞—Å"
    elif call.data == 'pogodaNow':
        lastAction("–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã —Å–µ–π—á–∞—Å")

        # –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        attempt = 0
        while attempt <= 3:
            if attempt == 3:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"""–ü–æ–≥–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
                                
–î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π""", reply_markup=addMarkup("now"), parse_mode="Markdown")
                
                break

            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üîç ‚Ä¢ ¬∑ ¬∑", reply_markup=addMarkup("now")) # –°–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–µ–µ –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                for i in sql.execute("SELECT url FROM users WHERE id = ?", (call.from_user.id, )):
                    url = i[0]
                url1 = url + "now"
                HEADERS = {'User-Agent': fake_useragent.UserAgent().random} #–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—ç–π–∫ —é–∑–µ—Ä –∞–≥–µ–Ω—Ç
                page = requests.get(url1, headers=HEADERS)
                html = BeautifulSoup(page.text, 'lxml') #–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                title = html.find("div", {"class": "page-title"})
                titleText = title.find("h1").get_text()
                status = html.find("div", {"class": "now-desc"}).get_text(strip=True)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üîç ¬∑ ‚Ä¢ ¬∑", reply_markup=addMarkup("now")) # –°–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–µ–µ –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                wind = html.find("div", {"class": "unit unit_wind_m_s"})
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üîç ¬∑ ¬∑ ‚Ä¢", reply_markup=addMarkup("now")) # –°–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–µ–µ –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                wind.select_one('.item-measure').decompose()
                wind = wind.get_text()

                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"""{titleText}:

*{status}, {temp(0)}¬∞, {wind} –º/—Å*

–ü–æ –æ—â—É—â–µ–Ω–∏—é {temp(1)}""", reply_markup=addMarkup("now"), parse_mode="Markdown")
                
                break

            # –ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            except:
                print(f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
                attempt = attempt + 1
                time.sleep(0.5)

    # –ò—Å—Ö–æ–¥ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "—Å–µ–≥–æ–¥–Ω—è"
    elif call.data == "pogodaToday":
        lastAction("–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")

        # –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        attempt = 0
        while attempt <= 3:
            if attempt == 3:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"""–ü–æ–≥–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
                                
–î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π""", reply_markup=addMarkup("today"), parse_mode="Markdown")
                
                break

            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üîç ‚Ä¢ ¬∑ ¬∑", reply_markup=addMarkup("today")) # –°–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–µ–µ –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                for i in sql.execute("SELECT url FROM users WHERE id = ?", (call.from_user.id, )):
                    url = i[0]
                HEADERS = {'User-Agent': fake_useragent.UserAgent().random} #–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—ç–π–∫ —é–∑–µ—Ä –∞–≥–µ–Ω—Ç
                page = requests.get(url, headers=HEADERS)
                html = BeautifulSoup(page.text, 'lxml') #–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üîç ¬∑ ‚Ä¢ ¬∑", reply_markup=addMarkup("today")) # –°–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–µ–µ –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                title = html.find("div", {"class": "page-title"})
                titleText = title.find("h1").get_text()
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üîç ¬∑ ¬∑ ‚Ä¢", reply_markup=addMarkup("today")) # –°–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–µ–µ –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                date = html.find_all("div", {"class": "date"})[1].get_text(strip=True)

                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"""{titleText} —Å–µ–≥–æ–¥–Ω—è ({date}):

*{timings(3)}.00:* {temp(9)}¬∞, {status(3)}, {wind(3)} –º/—Å
*{timings(4)}.00:* {temp(10)}¬∞, {status(4)}, {wind(4)} –º/—Å
*{timings(5)}.00:* {temp(11)}¬∞, {status(5)}, {wind(5)} –º/—Å
*{timings(6)}.00:* {temp(12)}¬∞, {status(6)}, {wind(6)} –º/—Å
*{timings(7)}.00:* {temp(13)}¬∞, {status(7)}, {wind(7)} –º/—Å""", reply_markup=addMarkup("today"), parse_mode="Markdown")
                
                break

            # –ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            except:
                print(f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
                attempt = attempt + 1
                time.sleep(0.5)

    # –ò—Å—Ö–æ–¥ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–∑–∞–≤—Ç—Ä–∞"
    elif call.data == 'pogodaTomorrow':
        lastAction("–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞")

        # –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        attempt = 0
        while attempt <= 3:
            if attempt == 3:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"""–ü–æ–≥–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
                                
–î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π""", reply_markup=addMarkup("tomorrow"), parse_mode="Markdown")
                
                break

            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üîç ‚Ä¢ ¬∑ ¬∑", reply_markup=addMarkup("tomorrow")) # –°–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–µ–µ –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                for i in sql.execute("SELECT url FROM users WHERE id = ?", (call.from_user.id, )):
                    url = i[0]
                HEADERS = {'User-Agent': fake_useragent.UserAgent().random} #–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—ç–π–∫ —é–∑–µ—Ä –∞–≥–µ–Ω—Ç
                url = url + "tomorrow"
                page = requests.get(url, headers=HEADERS)
                html = BeautifulSoup(page.text, 'lxml') #–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üîç ¬∑ ‚Ä¢ ¬∑", reply_markup=addMarkup("tomorrow")) # –°–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–µ–µ –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                title = html.find("div", {"class": "page-title"})
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üîç ¬∑ ¬∑ ‚Ä¢", reply_markup=addMarkup("tomorrow")) # –°–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–µ–µ –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                titleText = title.find("h1").get_text()
                date = html.find_all("div", {"class": "date"})[1].get_text(strip=True)

                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"""{titleText} ({date}):

*{timings(3)}.00:* {temp(9)}¬∞, {status(3)}, {wind(3)} –º/—Å
*{timings(4)}.00:* {temp(10)}¬∞, {status(4)}, {wind(4)} –º/—Å
*{timings(5)}.00:* {temp(11)}¬∞, {status(5)}, {wind(5)} –º/—Å
*{timings(6)}.00:* {temp(12)}¬∞, {status(6)}, {wind(6)} –º/—Å
*{timings(7)}.00:* {temp(13)}¬∞, {status(7)}, {wind(7)} –º/—Å""", reply_markup=addMarkup("tomorrow"), parse_mode="Markdown")
                
                break

            # –ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            except :
                print(f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
                attempt = attempt + 1
                time.sleep(0.5)
         
    # –ò—Å—Ö–æ–¥ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "10 –¥–Ω–µ–π"
    elif call.data == 'pogoda10d':
        lastAction("–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –Ω–∞ 10 –¥–Ω–µ–π")

        # –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        attempt = 0
        while attempt <= 3:
            if attempt == 3:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"""–ü–æ–≥–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
                                
–î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π""", reply_markup=addMarkup("10d"), parse_mode="Markdown")
                
                break

            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üîç ‚Ä¢ ¬∑ ¬∑", reply_markup=addMarkup("10d")) # –°–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–µ–µ –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                for i in sql.execute("SELECT url FROM users WHERE id = ?", (call.from_user.id, )):
                    url = i[0]
                HEADERS = {'User-Agent': fake_useragent.UserAgent().random} #–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—ç–π–∫ —é–∑–µ—Ä –∞–≥–µ–Ω—Ç
                url = url + "10-days/"
                page = requests.get(url, headers=HEADERS)
                html = BeautifulSoup(page.text, 'lxml') #–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üîç ¬∑ ‚Ä¢ ¬∑", reply_markup=addMarkup("10d")) # –°–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–µ–µ –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                title = html.find("div", {"class": "page-title"})
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üîç ¬∑ ¬∑ ‚Ä¢", reply_markup=addMarkup("10d")) # –°–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–µ–µ –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                titleText = title.find("h1").get_text()

                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"""{titleText}:

*{day(0)} ({date(0)}):* {temp(1)}¬∞, {status(0)}
*{day(1)} ({date(1)}):* {temp(3)}¬∞, {status(1)}
*{day(2)} ({date(2)}):* {temp(5)}¬∞, {status(2)}
*{day(3)} ({date(3)}):* {temp(7)}¬∞, {status(3)}
*{day(4)} ({date(4)}):* {temp(9)}¬∞, {status(4)}
*{day(5)} ({date(5)}):* {temp(11)}¬∞, {status(5)}
*{day(6)} ({date(6)}):* {temp(13)}¬∞, {status(6)}
*{day(7)} ({date(7)}):* {temp(15)}¬∞, {status(7)}
*{day(8)} ({date(8)}):* {temp(17)}¬∞, {status(8)}
*{day(9)} ({date(9)}):* {temp(19)}¬∞, {status(9)}""", reply_markup=addMarkup("10d"), parse_mode="Markdown")
                
                break

            # –ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            except:
                print(f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
                attempt = attempt + 1
                time.sleep(0.5)

    # –í—ã–≤–æ–¥ –ø–æ–≥–æ–¥—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–≥–æ–¥—ã "—Å–µ–π—á–∞—Å"
    elif call.data == 'notifNow':
        for i in sql.execute("SELECT notification FROM users WHERE id = ?", (call.from_user.id, )):
            notif = i[0]

        if notif == 0:
            notifOn()
        else:
            notifOff()

        # –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        attempt = 0
        while attempt <= 3:
            if attempt == 3:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"""–ü–æ–≥–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
                                
–î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π""", reply_markup=addMarkup("now"), parse_mode="Markdown")
                
                break

            try:
                for i in sql.execute("SELECT url FROM users WHERE id = ?", (call.from_user.id, )):
                    url = i[0]
                url1 = url + "now"
                HEADERS = {'User-Agent': fake_useragent.UserAgent().random} #–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—ç–π–∫ —é–∑–µ—Ä –∞–≥–µ–Ω—Ç
                page = requests.get(url1, headers=HEADERS)
                html = BeautifulSoup(page.text, 'lxml') #–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                title = html.find("div", {"class": "page-title"})
                titleText = title.find("h1").get_text()
                status = html.find("div", {"class": "now-desc"}).get_text(strip=True)
                wind = html.find("div", {"class": "unit unit_wind_m_s"})
                wind.select_one('.item-measure').decompose()
                wind = wind.get_text()

                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"""{titleText}:

*{status}, {temp(0)}¬∞, {wind} –º/—Å*

–ü–æ –æ—â—É—â–µ–Ω–∏—é {temp(1)}""", reply_markup=addMarkup("now"), parse_mode="Markdown")
                
                break

            # –ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            except:
                print(f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
                attempt = attempt + 1
                time.sleep(0.5)

    # –í—ã–≤–æ–¥ –ø–æ–≥–æ–¥—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–≥–æ–¥—ã "—Å–µ–≥–æ–¥–Ω—è"
    elif call.data == 'notifToday':
        for i in sql.execute("SELECT notification FROM users WHERE id = ?", (call.from_user.id, )):
            notif = i[0]

        if notif == 0:
            notifOn()
        else:
            notifOff()

        # –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        attempt = 0
        while attempt <= 3:
            if attempt == 3:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"""–ü–æ–≥–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
                                
–î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π""", reply_markup=addMarkup("today"), parse_mode="Markdown")
                
                break

            try:
                for i in sql.execute("SELECT url FROM users WHERE id = ?", (call.from_user.id, )):
                    url = i[0]
                HEADERS = {'User-Agent': fake_useragent.UserAgent().random} #–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—ç–π–∫ —é–∑–µ—Ä –∞–≥–µ–Ω—Ç
                page = requests.get(url, headers=HEADERS)
                html = BeautifulSoup(page.text, 'lxml') #–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                title = html.find("div", {"class": "page-title"})
                titleText = title.find("h1").get_text()

                date = html.find_all("div", {"class": "date"})[1].get_text(strip=True)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"""{titleText} —Å–µ–≥–æ–¥–Ω—è ({date}):

*{timings(3)}.00:* {temp(9)}¬∞, {status(3)}, {wind(3)} –º/—Å
*{timings(4)}.00:* {temp(10)}¬∞, {status(4)}, {wind(4)} –º/—Å
*{timings(5)}.00:* {temp(11)}¬∞, {status(5)}, {wind(5)} –º/—Å
*{timings(6)}.00:* {temp(12)}¬∞, {status(6)}, {wind(6)} –º/—Å
*{timings(7)}.00:* {temp(13)}¬∞, {status(7)}, {wind(7)} –º/—Å""", reply_markup=addMarkup("today"), parse_mode="Markdown")
                
                break

            # –ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            except:
                print(f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
                attempt = attempt + 1
                time.sleep(0.5)


    # –í—ã–≤–æ–¥ –ø–æ–≥–æ–¥—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–≥–æ–¥—ã "–∑–∞–≤—Ç—Ä–∞"
    elif call.data == 'notifTomorrow':
        for i in sql.execute("SELECT notification FROM users WHERE id = ?", (call.from_user.id, )):
            notif = i[0]

        if notif == 0:
            notifOn()
        else:
            notifOff()

        # –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        attempt = 0
        while attempt <= 3:
            if attempt == 3:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"""–ü–æ–≥–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
                                
–î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π""", reply_markup=addMarkup("tomorrow"), parse_mode="Markdown")
                
                break

            try:
                for i in sql.execute("SELECT url FROM users WHERE id = ?", (call.from_user.id, )):
                    url = i[0]
                HEADERS = {'User-Agent': fake_useragent.UserAgent().random} #–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—ç–π–∫ —é–∑–µ—Ä –∞–≥–µ–Ω—Ç
                url = url + "tomorrow"
                page = requests.get(url, headers=HEADERS)
                html = BeautifulSoup(page.text, 'lxml') #–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                title = html.find("div", {"class": "page-title"})
                titleText = title.find("h1").get_text()

                date = html.find_all("div", {"class": "date"})[1].get_text(strip=True)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"""{titleText} ({date}):

*{timings(3)}.00:* {temp(9)}¬∞, {status(3)}, {wind(3)} –º/—Å
*{timings(4)}.00:* {temp(10)}¬∞, {status(4)}, {wind(4)} –º/—Å
*{timings(5)}.00:* {temp(11)}¬∞, {status(5)}, {wind(5)} –º/—Å
*{timings(6)}.00:* {temp(12)}¬∞, {status(6)}, {wind(6)} –º/—Å
*{timings(7)}.00:* {temp(13)}¬∞, {status(7)}, {wind(7)} –º/—Å""", reply_markup=addMarkup("tomorrow"), parse_mode="Markdown")
                
                break

            # –ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            except:
                print(f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
                attempt = attempt + 1
                time.sleep(0.5)

    # –í—ã–≤–æ–¥ –ø–æ–≥–æ–¥—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–≥–æ–¥—ã "10 –¥–Ω–µ–π"
    elif call.data == 'notif10d':
        for i in sql.execute("SELECT notification FROM users WHERE id = ?", (call.from_user.id, )):
            notif = i[0]

        if notif == 0:
            notifOn()
        else:
            notifOff()

        # –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        attempt = 0
        while attempt <= 3:
            if attempt == 3:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"""–ü–æ–≥–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
                                
–î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π""", reply_markup=addMarkup("10d"), parse_mode="Markdown")
                
                break

            try:
                for i in sql.execute("SELECT url FROM users WHERE id = ?", (call.from_user.id, )):
                    url = i[0]
                HEADERS = {'User-Agent': fake_useragent.UserAgent().random} #–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—ç–π–∫ —é–∑–µ—Ä –∞–≥–µ–Ω—Ç
                url = url + "10-days/"
                page = requests.get(url, headers=HEADERS)
                html = BeautifulSoup(page.text, 'lxml') #–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

                title = html.find("div", {"class": "page-title"})
                titleText = title.find("h1").get_text()

                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"""{titleText}:

*{day(0)} ({date(0)}):* {temp(1)}¬∞, {status(0)}
*{day(1)} ({date(1)}):* {temp(3)}¬∞, {status(1)}
*{day(2)} ({date(2)}):* {temp(5)}¬∞, {status(2)}
*{day(3)} ({date(3)}):* {temp(7)}¬∞, {status(3)}
*{day(4)} ({date(4)}):* {temp(9)}¬∞, {status(4)}
*{day(5)} ({date(5)}):* {temp(11)}¬∞, {status(5)}
*{day(6)} ({date(6)}):* {temp(13)}¬∞, {status(6)}
*{day(7)} ({date(7)}):* {temp(15)}¬∞, {status(7)}
*{day(8)} ({date(8)}):* {temp(17)}¬∞, {status(8)}
*{day(9)} ({date(9)}):* {temp(19)}¬∞, {status(9)}""", reply_markup=addMarkup("10d"), parse_mode="Markdown")
                
                break

            # –ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            except:
                print(f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
                attempt = attempt + 1
                time.sleep(0.5)

    # –ò—Å—Ö–æ–¥ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å id
    elif call.data == 'list':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n{mes}")

    # –ò—Å—Ö–æ–¥ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥"
    elif call.data == 'edit':
        global messageWriteCity1
        messageWriteCity1 = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
        bot.register_next_step_handler(messageWriteCity1, addCity); # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

# –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(content_types=["text"])
def basic_commands(message):

    db = sqlite3.connect("users.db")
    sql = db.cursor()

    if message.text == message.text:
        bot.send_message(message.chat.id, "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏, –ª–∏–±–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
    else:
        bot.send_message(message.chat.id, "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏, –ª–∏–±–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")

if __name__ == '__main__':
    bot.infinity_polling()
